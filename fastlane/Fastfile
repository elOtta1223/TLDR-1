fastlane_version "1.53.0"
default_platform :ios

def commit
  commit_version_bump(
    message: 'Version Bump by fastlane',
    xcodeproj: project_file,
    force: true
  )
  push_to_git_remote
end

def codesign
  cert(team_id: '74HVZ53TRR', team_name: 'Suraj Pathak')
  sigh(team_id: '74HVZ53TRR', team_name: 'Suraj Pathak')
end

def provision
  produce(
      username: 'freesuraj@gmail.com',
      app_identifier: 'com.suraj.tldr',
      app_name: 'TLDR Man Page',
      language: 'English',
      app_version: '1.0.0',
      sku: '20160110tldrios',
      team_id: '74HVZ53TRR',
      team_name: 'Suraj Pathak'
  )
  cert
  sigh(force: true)
end

# ===================================================
#           Start of Fastlane actions
# ===================================================

platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    ensure_git_status_clean
  end

  # Lane 1: test
  desc "Runs all the tests"
  lane :test do
    scan
  end

  # Lane 2: testX
  desc "Runs the tests of the iOS App using xctest"
  lane :testX do
    xctest(
      workspace: './TLDR.xcworkspace',
      scheme: 'TLDR',
      sdk: 'iphonesimulator',
      destination: "name=iPhone 6"
    )
  end

  # Lane 3: build (using the default version number)
  desc "Build an app"
  private_lane :build do
    codesign
    cocoapods
    scan
    gym(
      workspace: 'TLDR.xcworkspace',
      scheme: 'TLDR',
      use_legacy_build_api: true,
      silent: true
    )
  end

  # Lane 4: testflight
  desc "Send test flight beta"
  lane :testflight do
    project_file = 'TLDR.xcodeproj'
    increment_version_number(bump_type: "patch")
    increment_build_number(xcodeproj: project_file)
    build
    pilot(
    distribute_external: true
    )
    commit
  end

  # Lane 5: testflightE (provided ipa exists)
  desc "Pilot to test flight if ipa exists"
  lane :testflightE do
    pilot(distribute_external: true)
  end

  # Lane 6: snapshot
  lane :snapshot do
    snapshot
  end

  # Lane 7: metadata
  desc "Uploads metadata only - no ipa file will be uploaded"
  desc "You'll get a summary of the collected metadata before it's uploaded"
  lane :metadata do
    deliver(submit_for_review: false)
  end

  # Lane 8: deploy
  desc "Deploy a new version to the App Store. It will create a new build first, then upload it"
  lane :deploy do
    increment_version_number(bump_type: "minor")
    build
    deliver(force: true, skip_screenshots: false, submit_for_review: true, automatic_release: true)
    add_git_tag
    commit
  end

  # Lane 9: deployE (Provided ipa exists)
  desc "Deploy an existing build to the App Store"
  lane :deployE do
    deliver(force: true, skip_screenshots: true, submit_for_review: true, automatic_release: true)
    add_git_tag
    push_git_tags
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    slack(
      message: "fastlane was successful :rocket:",
      success: true,
      default_payloads: [:lane, :test_result, :git_branch, :git_author]
    )

    clean_build_artifacts(
      exclude_pattern: ".*\.mobileprovision" # don't clear provisioning profiles, as we store them in git
    )
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
    )
  end
end



# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
