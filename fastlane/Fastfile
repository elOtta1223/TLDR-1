# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.49.0"

default_platform :ios

def build_app
  project_file = 'TLDR.xcodeproj'

  increment_build_number(xcodeproj: project_file) # version bump
  # Get the latest provisionnig profiles from the Dev Portal and
  # More information about code signing: https://github.com/KrauseFx/fastlane/blob/master/docs/CodeSigning.md
  # udid = sigh(app_identifier: "com.mindnode.mindnodetouch.watchkitextension", output_path: "/tmp")
  # ENV["WATCHKIT_EXTENSIONS_UDID"] = udid

  # udid = sigh(app_identifier: "com.mindnode.mindnodetouch.watchkitapp", output_path: "/tmp")
  # ENV["WATCHKIT_APP_UDID"] = udid
  cert
  udid = sigh(team_id: '74HVZ53TRR', team_name: 'Suraj Pathak', force: true)
  ENV["PROJECT_UDID"] = udid

  gym(
    workspace: 'TLDR.xcworkspace',
    scheme: 'TLDR',
    export_method: 'enterprise',
    use_legacy_build_api: true
  )

  commit_version_bump(
    message: 'Version Bump by fastlane',
    xcodeproj: project_file,
    force: true
  )

  push_to_git_remote
end

def build_app_appstore
  project_file = 'TLDR.xcodeproj'

  increment_build_number(xcodeproj: project_file) # version bump
  # Get the latest provisionnig profiles from the Dev Portal and
  # More information about code signing: https://github.com/KrauseFx/fastlane/blob/master/docs/CodeSigning.md
  # udid = sigh(app_identifier: "com.mindnode.mindnodetouch.watchkitextension", output_path: "/tmp")
  # ENV["WATCHKIT_EXTENSIONS_UDID"] = udid

  # udid = sigh(app_identifier: "com.mindnode.mindnodetouch.watchkitapp", output_path: "/tmp")
  # ENV["WATCHKIT_APP_UDID"] = udid

  udid = sigh(team_id: '74HVZ53TRR', team_name: 'Suraj Pathak', force: true)
  ENV["PROJECT_UDID"] = udid

  gym(
    workspace: 'TLDR.xcworkspace',
    scheme: 'TLDR',
    export_method: 'app-store',
    use_legacy_build_api: true
  )

  commit_version_bump(
    message: 'Version Bump by fastlane',
    xcodeproj: project_file,
    force: true
  )

  push_to_git_remote
end



platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    cocoapods
  end

  desc "Creating a code signing certificate and provisioning profile"
  lane :provision do
    produce(
        username: 'freesuraj@gmail.com',
        app_identifier: 'com.suraj.tldr',
        app_name: 'TLDR Man Page',
        language: 'English',
        app_version: '1.0.0',
        sku: '20160110tldrios',
        team_id: '74HVZ53TRR',
        team_name: 'Suraj Pathak'
    )
    cert
    sigh(force: true)
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  lane :screenshot do
    snapshot
  end

  desc "Create ipa"
  lane :build do
    gym(
      workspace: 'TLDR.xcworkspace',
      scheme: 'TLDR',
      export_method: 'enterprise',
      use_legacy_build_api: true
    )
  end

  desc "Uploads metadata only - no ipa file will be uploaded"
  desc "You'll get a summary of the collected metadata before it's uploaded"
  lane :upload_metadata do
    deliver(submit_for_review: false)
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    build_app
    pilot
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the App Store"
  lane :deploy do
    build_app_appstore
    deliver(force: true, skip_deploy: true, submit_for_review: true, automatic_release: true)
    frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
    # add_git_tag # drop a git tag
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end



# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
